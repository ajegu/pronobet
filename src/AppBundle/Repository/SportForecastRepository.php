<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Tipster;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * SportForecastRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SportForecastRepository extends \Doctrine\ORM\EntityRepository
{

    public function getSportForecastsUnpublished($firstResult = 0, $maxResult = 10, $search = '', $isVip = '', Tipster $tipster)
    {
        $qd = $this->createQueryBuilder('sf')
            ->where('sf.tipster = :tipster')
            ->andWhere('sf.publishedAt IS NULL')
            ->setParameter('tipster', $tipster->getId());

        if ($maxResult > 0) {
            $qd
                ->setFirstResult($firstResult)
                ->setMaxResults($maxResult)
            ;
        }

        if ($search !== '') {
            $qd->andWhere('sf.title LIKE :search')
                ->setParameter('search', "%".$search."%");
        }

        if ($isVip !== '') {
            $qd->andWhere('sf.isVip = :isVip')
                ->setParameter('isVip', $isVip);
        }

        $qd->orderBy('sf.createdAt', 'asc');

        $paginator = new Paginator($qd);

        return $paginator;
    }

    public function getSportForecastsInProgress($firstResult = 0, $maxResult = 10, $search = '', $isVip = '', Tipster $tipster)
    {
        $qd = $this->createQueryBuilder('sf')
            ->where('sf.tipster = :tipster')
            ->andWhere('sf.publishedAt IS NOT NULL')
            ->andWhere('sf.isValidate = false')
            ->andWhere(' (SELECT COUNT(sb1.id) FROM AppBundle:SportBet AS sb1 WHERE sb1.playedAt < :date AND sb1.sportForecast = sf.id ) < 
            (SELECT COUNT(sb2.id) FROM AppBundle:SportBet AS sb2 WHERE sb2.sportForecast = sf.id) ')
            ->setParameter('tipster', $tipster->getId())
            ->setParameter('date', new \DateTime())
            ;

        if ($maxResult > 0) {
            $qd
                ->setFirstResult($firstResult)
                ->setMaxResults($maxResult)
            ;
        }

        if ($search !== '') {
            $qd->andWhere('sf.title LIKE :search')
                ->setParameter('search', "%".$search."%");
        }

        if ($isVip !== '') {
            $qd->andWhere('sf.isVip = :isVip')
                ->setParameter('isVip', $isVip);
        }

        $qd->orderBy('sf.publishedAt', 'desc');

        $paginator = new Paginator($qd);

        return $paginator;
    }

    public function getSportForecastsToValidate($firstResult = 0, $maxResult = 10, $search = '', $isVip = '', Tipster $tipster)
    {
        $qd = $this->createQueryBuilder('sf')
            ->where('sf.tipster = :tipster')
            ->andWhere('sf.publishedAt IS NOT NULL')
            ->andWhere('sf.isValidate = false')
            ->andWhere(' (SELECT COUNT(sb.id) FROM AppBundle:SportBet AS sb WHERE sb.playedAt < :date AND sb.sportForecast = sf.id ) = 
            (SELECT COUNT(sb2.id) FROM AppBundle:SportBet AS sb2 WHERE sb2.sportForecast = sf.id) ')
            ->setParameter('tipster', $tipster->getId())
            ->setParameter('date', new \DateTime())
        ;

        if ($maxResult > 0) {
            $qd
                ->setFirstResult($firstResult)
                ->setMaxResults($maxResult)
            ;
        }

        if ($search !== '') {
            $qd->andWhere('sf.title LIKE :search')
                ->setParameter('search', "%".$search."%");
        }

        if ($isVip !== '') {
            $qd->andWhere('sf.isVip = :isVip')
                ->setParameter('isVip', $isVip);
        }

        $qd->orderBy('sf.publishedAt', 'desc');

        $paginator = new Paginator($qd);

        return $paginator;
    }

    public function getSportForecastsHistoryByTipster($firstResult = 0, $maxResult = 10, $search = '', $isVip = '', Tipster $tipster, $startDate = null, $endDate = null, $order = 'desc')
    {
        $qd = $this->createQueryBuilder('sf')
            ->where('sf.tipster = :tipster')
            ->andWhere('sf.publishedAt IS NOT NULL')
            ->andWhere('sf.isValidate = true')
            ->setParameter('tipster', $tipster->getId());

        if ($maxResult > 0) {
            $qd
                ->setFirstResult($firstResult)
                ->setMaxResults($maxResult)
            ;
        }

        if ($search !== '') {
            $qd->andWhere('sf.title LIKE :search')
                ->setParameter('search', "%".$search."%");
        }

        if ($isVip !== '') {
            $qd->andWhere('sf.isVip = :isVip')
                ->setParameter('isVip', $isVip);
        }

        if ($startDate !== null && $endDate !== null) {
            $qd->andWhere('sf.publishedAt >= :startDate')
                ->andWhere('sf.publishedAt < :endDate')
                ->setParameter(':startDate', $startDate->format('Y-m-d'))
                ->setParameter(':endDate', $endDate->format('Y-m-d'));
        }

        $qd->orderBy('sf.publishedAt', $order);

        $paginator = new Paginator($qd);

        return $paginator;
    }

    public function getSportForecastsHistory($firstResult = 0, $maxResult = 10)
    {
        $qd = $this->createQueryBuilder('sf')
            ->where('sf.publishedAt IS NOT NULL')
            ->andWhere('sf.isValidate = true');

        if ($maxResult > 0) {
            $qd
                ->setFirstResult($firstResult)
                ->setMaxResults($maxResult)
            ;
        }

        $qd->orderBy('sf.publishedAt', 'desc');

        $paginator = new Paginator($qd);

        return $paginator;
    }

    public function getFreeSportForecasts($sportId = null, $tipsterId = null)
    {
        $qd = $this->createQueryBuilder('sf')
            ->where('sf.publishedAt IS NOT NULL')
            ->andWhere('sf.isVip = false')
            ->andWhere('sf.isValidate = false')
            ->andWhere(' (SELECT COUNT(sb1.id) FROM AppBundle:SportBet AS sb1 WHERE sb1.playedAt < :date AND sb1.sportForecast = sf.id ) < 
            (SELECT COUNT(sb2.id) FROM AppBundle:SportBet AS sb2 WHERE sb2.sportForecast = sf.id) ')
            ->setParameter('date', new \DateTime())
        ;

        if ($sportId) {
            $qd->andWhere('sf.id IN(SELECT IDENTITY(sb3.sportForecast) FROM AppBundle:SportBet AS sb3 WHERE sb3.sport = :sportId)')
                ->setParameter('sportId', $sportId);
        }

        if ($tipsterId) {
            $qd->andWhere('sf.tipster = :tipsterId')
                ->setParameter('tipsterId', $tipsterId);
        }

        $qd->orderBy('sf.publishedAt', 'desc');

        $paginator = new Paginator($qd);

        return $paginator;
    }

    public function getVIPSportForecasts($sportId = null, $tipsterId = null, $tipsters = [])
    {
        $qd = $this->createQueryBuilder('sf')
            ->where('sf.publishedAt IS NOT NULL')
            ->andWhere('sf.isVip = true')
            ->andWhere('sf.isValidate = false')
            ->andWhere(' (SELECT COUNT(sb1.id) FROM AppBundle:SportBet AS sb1 WHERE sb1.playedAt < :date AND sb1.sportForecast = sf.id ) < 
            (SELECT COUNT(sb2.id) FROM AppBundle:SportBet AS sb2 WHERE sb2.sportForecast = sf.id) ')
            ->setParameter('date', new \DateTime())
        ;

        if ($sportId) {
            $qd->andWhere('sf.id IN(SELECT IDENTITY(sb3.sportForecast) FROM AppBundle:SportBet AS sb3 WHERE sb3.sport = :sportId)')
                ->setParameter('sportId', $sportId);
        }

        if ($tipsterId) {
            $qd->andWhere('sf.tipster = :tipsterId')
                ->setParameter('tipsterId', $tipsterId);
        }

        //$qd->expr()->in('sf.tipster', $tipsters);
        $qd->andWhere('sf.tipster IN (:tipsters)')
            ->setParameter('tipsters', $tipsters);

        $qd->orderBy('sf.publishedAt', 'desc');

        $paginator = new Paginator($qd);

        return $paginator;
    }


    public function getAllPublishedSportForecasts($firstResult = 0, $maxResult = 10,  $state = '', $vip = '', $tipsterId)
    {
        $qd = $this->createQueryBuilder('sf')
            ->andWhere('sf.publishedAt IS NOT NULL');

        if ($maxResult > 0) {
            $qd
                ->setFirstResult($firstResult)
                ->setMaxResults($maxResult)
            ;
        }

        if ($state !== '') {

        }

        if ($vip !== '') {
            $qd->andWhere('sf.isVip = :isVip')
                ->setParameter('isVip', $vip);
        }

        if ($tipsterId > 0) {
            $qd->andWhere('sf.tipster = :tipsterId')
                ->setParameter('tipsterId', $tipsterId);
        }

        $qd->orderBy('sf.publishedAt', 'desc');

        $paginator = new Paginator($qd);

        return $paginator;
    }
}
